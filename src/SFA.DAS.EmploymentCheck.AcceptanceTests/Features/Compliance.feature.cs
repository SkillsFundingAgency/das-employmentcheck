// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.EmploymentCheck.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Compliance")]
    public partial class ComplianceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Compliance.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Compliance", "\t\tIn order to identify learners that are being paid\r\n\t\tAs the SFA Funding Operati" +
                    "onal team\r\n\t\tI want to extract information from various system\r\n\t\tSo that SFA Mo" +
                    "nitoring Team can carry on with further investigation.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Employment Check")]
        [NUnit.Framework.CategoryAttribute("AMl1297")]
        [NUnit.Framework.TestCaseAttribute("24979", "333/AA00001", "QQ123456C", "5641235789", "Employed", "Yes", "10007898", "112233", "444/AA00001,555/AA00001,333/AA00001", null)]
        [NUnit.Framework.TestCaseAttribute("24979", "333/AA00001", "QQ123456D", "5641235779", "NotEmployed", "No", "10007898", "112234", "333/AA00001,555/AA00001", null)]
        public virtual void EmploymentCheck(string accountId, string empRef, string nino, string uln, string hmrcresponse, string check, string ukprn, string apprenticeshipId, string empRefs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AMl1297"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Employment Check", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
testRunner.Given(string.Format("A Submission Event has raised with Apprenticeship {0} and NINO {1} and ULN {2} an" +
                        "d Ukprn {3}", apprenticeshipId, nino, uln, ukprn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
testRunner.And(string.Format("a Commitment with Apprenticeship {0} and Ukprn {1} and Account Id {2} exists", apprenticeshipId, ukprn, accountId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
testRunner.And(string.Format("An Account with an Account Id {0} and EmpRef {1} exists", accountId, empRefs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Paye",
                        "Nino",
                        "Response"});
            table1.AddRow(new string[] {
                        "444/AA00001",
                        string.Format("{0}", nino),
                        "NotEmployed"});
            table1.AddRow(new string[] {
                        "555/AA00001",
                        string.Format("{0}", nino),
                        "NotEmployed"});
            table1.AddRow(new string[] {
                        "333/AA00001",
                        string.Format("{0}", nino),
                        string.Format("{0}", hmrcresponse)});
#line 12
testRunner.And("Hmrc Api is configured as", ((string)(null)), table1, "And ");
#line 17
testRunner.When("I run the worker role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
testRunner.Then(string.Format("I should have PassedValidationCheck {0} for ULN {1} and NINO {2}", check, uln, nino), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("UKPRN mismatch")]
        [NUnit.Framework.CategoryAttribute("AML2073")]
        [NUnit.Framework.TestCaseAttribute("55443", "333/AA00001", "TT123456D", "5641235779", "No", "10007898", "112234", null)]
        public virtual void UKPRNMismatch(string accountId, string empRef, string nino, string uln, string check, string ukprn, string apprenticeshipId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AML2073"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UKPRN mismatch", @__tags);
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given(string.Format("A Submission Event has raised with Apprenticeship {0} and NINO {1} and ULN {2} an" +
                        "d Ukprn {3}", apprenticeshipId, nino, uln, ukprn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
testRunner.And(string.Format("a Commitment with Apprenticeship {0} and Ukprn {1} and Account Id {2} throws 401", apprenticeshipId, ukprn, accountId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
testRunner.And(string.Format("An Account with an Account Id {0} and EmpRef {1} exists", accountId, empRef), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Paye",
                        "Nino",
                        "Response"});
            table2.AddRow(new string[] {
                        string.Format("{0}", empRef),
                        string.Format("{0}", nino),
                        "Employed"});
#line 32
testRunner.And("Hmrc Api is configured as", ((string)(null)), table2, "And ");
#line 35
testRunner.When("I run the worker role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.Then(string.Format("I should have PassedValidationCheck {0} for ULN {1} and NINO {2}", check, uln, nino), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Hmrc returned Not Found")]
        [NUnit.Framework.CategoryAttribute("AML2073")]
        [NUnit.Framework.TestCaseAttribute("24978", "333/AA00001", "QQ123456D", "5641235779", "NotEmployed", "No", "10007898", "112234", null)]
        public virtual void HmrcReturnedNotFound(string accountId, string empRef, string nino, string uln, string hmrcresponse, string check, string ukprn, string apprenticeshipId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AML2073"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Hmrc returned Not Found", @__tags);
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.Given(string.Format("A Submission Event has raised with Apprenticeship {0} and NINO {1} and ULN {2} an" +
                        "d Ukprn {3}", apprenticeshipId, nino, uln, ukprn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
testRunner.And(string.Format("a Commitment with Apprenticeship {0} and Ukprn {1} and Account Id {2} exists", apprenticeshipId, ukprn, accountId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
testRunner.And(string.Format("An Account with an Account Id {0} and EmpRef {1} exists", accountId, empRef), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Paye",
                        "Nino",
                        "Response"});
            table3.AddRow(new string[] {
                        string.Format("{0}", empRef),
                        string.Format("{0}", nino),
                        string.Format("{0}", hmrcresponse)});
#line 48
testRunner.And("Hmrc Api is configured to return Not Found for", ((string)(null)), table3, "And ");
#line 51
testRunner.When("I run the worker role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
testRunner.Then(string.Format("I should have PassedValidationCheck {0} for ULN {1} and NINO {2}", check, uln, nino), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Azure message lock should be automatically renewed")]
        [NUnit.Framework.CategoryAttribute("AMl2233")]
        [NUnit.Framework.CategoryAttribute("addmoreEmpRefstoanAccount")]
        [NUnit.Framework.TestCaseAttribute("22330", "333/AA00001", "AZ123456C", "5641235789", "Employed", "Yes", "10007898", "112233", "9997/AA00001,9998/AA00001,9999/AA00001", null)]
        public virtual void AzureMessageLockShouldBeAutomaticallyRenewed(string accountId, string empRef, string nino, string uln, string hmrcresponse, string check, string ukprn, string apprenticeshipId, string empRefs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AMl2233",
                    "addmoreEmpRefstoanAccount"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Azure message lock should be automatically renewed", @__tags);
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
testRunner.Given(string.Format("A Submission Event has raised with Apprenticeship {0} and NINO {1} and ULN {2} an" +
                        "d Ukprn {3}", apprenticeshipId, nino, uln, ukprn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
testRunner.And(string.Format("a Commitment with Apprenticeship {0} and Ukprn {1} and Account Id {2} exists", apprenticeshipId, ukprn, accountId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
testRunner.And(string.Format("An Account with an Account Id {0} and EmpRef {1} exists", accountId, empRefs), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Paye",
                        "Nino",
                        "Response"});
            table4.AddRow(new string[] {
                        "9997/AA00001",
                        string.Format("{0}", nino),
                        "NotEmployed"});
            table4.AddRow(new string[] {
                        "9998/AA00001",
                        string.Format("{0}", nino),
                        "NotEmployed"});
            table4.AddRow(new string[] {
                        "9999/AA00001",
                        string.Format("{0}", nino),
                        string.Format("{0}", hmrcresponse)});
#line 65
testRunner.And("Hmrc Api is configured as", ((string)(null)), table4, "And ");
#line 70
testRunner.When("I run the worker role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
testRunner.Then(string.Format("I should have PassedValidationCheck {0} for ULN {1} and NINO {2}", check, uln, nino), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
